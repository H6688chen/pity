# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.v1.service.request_pb2 as request__pb2


class testcaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listTestCase = channel.unary_unary(
                '/testcase/listTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertTestCase = channel.unary_unary(
                '/testcase/insertTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.createTestCase = channel.unary_unary(
                '/testcase/createTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateTestCase = channel.unary_unary(
                '/testcase/updateTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteTestCase = channel.unary_unary(
                '/testcase/deleteTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryTestCase = channel.unary_unary(
                '/testcase/queryTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.moveTestCase = channel.unary_unary(
                '/testcase/moveTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertAsserts = channel.unary_unary(
                '/testcase/insertAsserts',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateAsserts = channel.unary_unary(
                '/testcase/updateAsserts',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteAsserts = channel.unary_unary(
                '/testcase/deleteAsserts',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertConstructor = channel.unary_unary(
                '/testcase/insertConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateConstructor = channel.unary_unary(
                '/testcase/updateConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteConstructor = channel.unary_unary(
                '/testcase/deleteConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.reorderConstructor = channel.unary_unary(
                '/testcase/reorderConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryConstructorTree = channel.unary_unary(
                '/testcase/queryConstructorTree',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryConstructor = channel.unary_unary(
                '/testcase/queryConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.listConstructor = channel.unary_unary(
                '/testcase/listConstructor',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryTestReport = channel.unary_unary(
                '/testcase/queryTestReport',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.listTestReport = channel.unary_unary(
                '/testcase/listTestReport',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryXmindData = channel.unary_unary(
                '/testcase/queryXmindData',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryTestCaseDirTree = channel.unary_unary(
                '/testcase/queryTestCaseDirTree',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryTestCaseTree = channel.unary_unary(
                '/testcase/queryTestCaseTree',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryTestCaseDir = channel.unary_unary(
                '/testcase/queryTestCaseDir',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertTestCaseDir = channel.unary_unary(
                '/testcase/insertTestCaseDir',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateTestCaseDir = channel.unary_unary(
                '/testcase/updateTestCaseDir',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteTestCaseDir = channel.unary_unary(
                '/testcase/deleteTestCaseDir',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertTestData = channel.unary_unary(
                '/testcase/insertTestData',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateTestData = channel.unary_unary(
                '/testcase/updateTestData',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteTestData = channel.unary_unary(
                '/testcase/deleteTestData',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.insertParams = channel.unary_unary(
                '/testcase/insertParams',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.updateParams = channel.unary_unary(
                '/testcase/updateParams',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.batchUpdateParams = channel.unary_unary(
                '/testcase/batchUpdateParams',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.deleteParams = channel.unary_unary(
                '/testcase/deleteParams',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.startRecord = channel.unary_unary(
                '/testcase/startRecord',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.stopRecord = channel.unary_unary(
                '/testcase/stopRecord',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.removeRecord = channel.unary_unary(
                '/testcase/removeRecord',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.queryRecordStatus = channel.unary_unary(
                '/testcase/queryRecordStatus',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.generateTestCase = channel.unary_unary(
                '/testcase/generateTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )
        self.importTestCase = channel.unary_unary(
                '/testcase/importTestCase',
                request_serializer=request__pb2.Request.SerializeToString,
                response_deserializer=request__pb2.Response.FromString,
                )


class testcaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def listTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertAsserts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAsserts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteAsserts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reorderConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryConstructorTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listConstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryTestReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTestReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryXmindData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryTestCaseDirTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryTestCaseTree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryTestCaseDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertTestCaseDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTestCaseDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTestCaseDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertTestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batchUpdateParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryRecordStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generateTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_testcaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.listTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.insertTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'createTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.createTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.queryTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'moveTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.moveTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertAsserts': grpc.unary_unary_rpc_method_handler(
                    servicer.insertAsserts,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateAsserts': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAsserts,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteAsserts': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteAsserts,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.insertConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.updateConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'reorderConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.reorderConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryConstructorTree': grpc.unary_unary_rpc_method_handler(
                    servicer.queryConstructorTree,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.queryConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'listConstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.listConstructor,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.queryTestReport,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'listTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.listTestReport,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryXmindData': grpc.unary_unary_rpc_method_handler(
                    servicer.queryXmindData,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryTestCaseDirTree': grpc.unary_unary_rpc_method_handler(
                    servicer.queryTestCaseDirTree,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryTestCaseTree': grpc.unary_unary_rpc_method_handler(
                    servicer.queryTestCaseTree,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryTestCaseDir': grpc.unary_unary_rpc_method_handler(
                    servicer.queryTestCaseDir,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertTestCaseDir': grpc.unary_unary_rpc_method_handler(
                    servicer.insertTestCaseDir,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateTestCaseDir': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTestCaseDir,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteTestCaseDir': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTestCaseDir,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertTestData': grpc.unary_unary_rpc_method_handler(
                    servicer.insertTestData,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateTestData': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTestData,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteTestData': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTestData,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'insertParams': grpc.unary_unary_rpc_method_handler(
                    servicer.insertParams,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'updateParams': grpc.unary_unary_rpc_method_handler(
                    servicer.updateParams,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'batchUpdateParams': grpc.unary_unary_rpc_method_handler(
                    servicer.batchUpdateParams,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'deleteParams': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteParams,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'startRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.startRecord,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'stopRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRecord,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'removeRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.removeRecord,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'queryRecordStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.queryRecordStatus,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'generateTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.generateTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
            'importTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.importTestCase,
                    request_deserializer=request__pb2.Request.FromString,
                    response_serializer=request__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'testcase', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class testcase(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def listTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/listTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/createTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/moveTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertAsserts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertAsserts',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateAsserts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateAsserts',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteAsserts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteAsserts',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reorderConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/reorderConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryConstructorTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryConstructorTree',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listConstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/listConstructor',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryTestReport',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/listTestReport',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryXmindData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryXmindData',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryTestCaseDirTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryTestCaseDirTree',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryTestCaseTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryTestCaseTree',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryTestCaseDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryTestCaseDir',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertTestCaseDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertTestCaseDir',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTestCaseDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateTestCaseDir',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTestCaseDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteTestCaseDir',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertTestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertTestData',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateTestData',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteTestData',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/insertParams',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/updateParams',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batchUpdateParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/batchUpdateParams',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/deleteParams',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/startRecord',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/stopRecord',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/removeRecord',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryRecordStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/queryRecordStatus',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def generateTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/generateTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def importTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testcase/importTestCase',
            request__pb2.Request.SerializeToString,
            request__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
